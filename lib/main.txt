import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:async';
import 'dart:math' as math;

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  // Erzwinge Querformat
  SystemChrome.setPreferredOrientations([
    DeviceOrientation.landscapeLeft,
    DeviceOrientation.landscapeRight,
  ]);
  runApp(const RCControllerApp());
}

class RCControllerApp extends StatelessWidget {
  const RCControllerApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'RC Controller',
      theme: ThemeData(
        // Helles, minimalistisches Theme
        colorScheme: ColorScheme.light(
          primary: Colors.grey[800]!, // Dunkelgrau als Hauptfarbe
          secondary: Colors.blueGrey[600]!, // Ein gedämpftes Blau/Grau als Akzent
          surface: Colors.grey[100]!, // Sehr heller Hintergrund für Oberflächen
          background: Colors.white, // Weißer Hintergrund
          error: Colors.redAccent[700]!,
          onPrimary: Colors.white, // Text auf primärem Hintergrund
          onSecondary: Colors.white, // Text auf sekundärem Hintergrund
          onSurface: Colors.black87, // Text auf Oberflächen
          onBackground: Colors.black87, // Text auf Hintergrund
          onError: Colors.white,
        ),
        scaffoldBackgroundColor: Colors.white, // Weißer Scaffold-Hintergrund
        // Angepasste Text-Styles für Lesbarkeit auf hellem Grund
        textTheme: TextTheme(
          displayLarge: TextStyle(fontFamily: 'Montserrat', fontWeight: FontWeight.w700, color: Colors.grey[900]),
          displayMedium: TextStyle(fontFamily: 'Montserrat', fontWeight: FontWeight.w700, color: Colors.grey[900]),
          displaySmall: TextStyle(fontFamily: 'Montserrat', fontWeight: FontWeight.w700, color: Colors.grey[900]),
          headlineMedium: TextStyle(fontFamily: 'Montserrat', fontWeight: FontWeight.w600, color: Colors.grey[800]),
          headlineSmall: TextStyle(fontFamily: 'Montserrat', fontWeight: FontWeight.w600, color: Colors.grey[800]),
          titleLarge: TextStyle(fontFamily: 'Montserrat', fontWeight: FontWeight.w600, color: Colors.grey[800]),
          bodyLarge: TextStyle(fontFamily: 'Montserrat', color: Colors.black87),
          bodyMedium: TextStyle(fontFamily: 'Montserrat', color: Colors.black54),
          labelLarge: TextStyle(fontFamily: 'Montserrat', fontWeight: FontWeight.w500, color: Colors.grey[700]), // Für Buttons etc.
        ),
        // Verwendung von Material 3 Komponenten
        useMaterial3: true,
        // Dezentere Button Styles
        iconButtonTheme: IconButtonThemeData(
          style: IconButton.styleFrom(
            foregroundColor: Colors.grey[700], // Icon Farbe
          ),
        ),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.grey[800], // Button Hintergrund
            foregroundColor: Colors.white, // Button Text
            elevation: 0, // Kein Schatten
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
        ),
        textButtonTheme: TextButtonThemeData(
          style: TextButton.styleFrom(
            foregroundColor: Colors.grey[700], // Text Button Farbe
          ),
        ),
      ),
      home: const ControllerScreen(),
    );
  }
}

class ControllerScreen extends StatefulWidget {
  const ControllerScreen({Key? key}) : super(key: key);

  @override
  State<ControllerScreen> createState() => _ControllerScreenState();
}

class _ControllerScreenState extends State<ControllerScreen> {
  String serverAddress = 'http://192.168.1.100:8080'; // Standard IP, anpassbar
  String connectionStatus = 'Nicht verbunden';
  bool isConnected = false;

  // Steuerparameter
  int speed = 0; // -100 (Rückwärts) bis 100 (Vorwärts)
  int direction = 0; // -50 (Links) bis 50 (Rechts) - Begrenzt!
  bool headlightsOn = false;
  bool hornOn = false;
  bool turboMode = false; // Wird nach kurzer Zeit zurückgesetzt
  bool calibrationMode = false; // Wird nach kurzer Zeit zurückgesetzt

  // Timer für Befehle (optional, um Netzwerklast zu reduzieren)
  Timer? _sendTimer;
  final Duration _sendInterval = const Duration(milliseconds: 50); // Sendet alle 50ms

  @override
  void dispose() {
    _sendTimer?.cancel();
    super.dispose();
  }

  // Sendet Befehle gebündelt oder bei Änderung
  void _queueSendCommand(String command, dynamic value) {
    if (!isConnected) return;

    // Sofort senden für Ein/Aus-Befehle oder Ende der Geste
    if (command == 'headlights' || command == 'horn' || command == 'turbo' || command == 'calibrate' || (command == 'speed' && value == 0) || (command == 'direction' && value == 0)) {
       _sendTimer?.cancel(); // Stoppe Timer für kontinuierliche Befehle
       _sendCommand(command, value);
    } else {
      // Startet oder resettet Timer für kontinuierliche Befehle (speed/direction)
       _sendTimer?.cancel();
       _sendTimer = Timer(_sendInterval, () {
         _sendCommand(command, value);
       });
    }
  }


  Future<void> _sendCommand(String command, dynamic value) async {
    if (!isConnected) return;

    // Debug-Ausgabe (kann entfernt werden)
    // print('Sending: $command = $value');

    try {
      final response = await http.post(
        Uri.parse('$serverAddress/command'),
        headers: {'Content-Type': 'application/json'},
        body: jsonEncode({
          'command': command,
          'value': value,
        }),
      ).timeout(const Duration(milliseconds: 500)); // Kürzeres Timeout

      if (response.statusCode != 200) {
        if (mounted) {
          setState(() {
            // Nur Status aktualisieren, nicht gleich disconnecten
            connectionStatus = 'Fehler: ${response.statusCode}';
            // isConnected = false; // Eventuell nicht sofort trennen
          });
        }
      }
      // Kein visueller Effekt mehr beim Senden für Minimalismus
    } catch (e) {
      if (mounted) {
        setState(() {
          connectionStatus = 'Verbindungsfehler';
          isConnected = false;
        });
      }
    }
  }

  Future<void> _testConnection() async {
    if (mounted) {
      setState(() {
        connectionStatus = 'Verbindung wird getestet...';
        isConnected = false; // Erstmal als nicht verbunden markieren
      });
    }

    try {
      final response = await http.get(
        Uri.parse('$serverAddress/status'),
      ).timeout(const Duration(seconds: 2)); // Kürzeres Timeout für Test

      if (mounted) {
        setState(() {
          if (response.statusCode == 200) {
            connectionStatus = 'Verbunden';
            isConnected = true;
          } else {
            connectionStatus = 'Fehler: ${response.statusCode}';
            isConnected = false;
          }
        });
      }
    } catch (e) {
      if (mounted) {
        setState(() {
          connectionStatus = 'Keine Verbindung möglich';
          isConnected = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        // Padding für den gesamten Bildschirmrand
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            children: [
              _buildHeader(),
              const SizedBox(height: 20),
              Expanded(
                child: Row(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    // Linke Seite: Hauptsteuerung (Lenkung & Speed)
                    Expanded(
                      flex: 3, // Mehr Platz für Hauptsteuerung
                      child: _buildControlPanel(),
                    ),
                    const SizedBox(width: 20),
                    // Rechte Seite: Zusatzfunktionen
                    Expanded(
                      flex: 2, // Weniger Platz für Zusatzfunktionen
                      child: _buildExtraControls(),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  // --- Header ---
  Widget _buildHeader() {
    final theme = Theme.of(context);
    final connectionColor = isConnected ? Colors.green[600] : Colors.red[600];

    return Row(
      children: [
        // Einfaches Icon statt Logo-Box
        Icon(Icons.directions_car_filled, color: theme.colorScheme.primary, size: 36),
        const SizedBox(width: 16),
        // Titel
        Text(
          'RC Controller',
          style: theme.textTheme.headlineSmall?.copyWith(fontWeight: FontWeight.bold),
        ),
        const Spacer(), // Füllt den Raum
        // Verbindungsstatus
        Row(
          children: [
            Container(
              width: 10,
              height: 10,
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                color: connectionColor,
              ),
            ),
            const SizedBox(width: 8),
            Text(
              connectionStatus,
              style: theme.textTheme.bodyMedium?.copyWith(color: connectionColor),
            ),
          ],
        ),
        const SizedBox(width: 16),
        // Einstellungs-Button (minimalistisch)
        IconButton(
          onPressed: () {
            showDialog(
              context: context,
              builder: (context) => _buildConnectionDialog(),
            );
          },
          icon: Icon(Icons.settings_outlined, color: theme.colorScheme.primary),
          tooltip: 'Einstellungen',
        ),
      ],
    );
  }

  // --- Haupt-Steuerpanel (Links) ---
  Widget _buildControlPanel() {
    return Container(
       // Dezenter Hintergrund und Rand zur Abgrenzung
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.surface,
        borderRadius: BorderRadius.circular(16),
        // border: Border.all(color: Colors.grey[300]!, width: 1), // Optional: sehr dezenter Rand
      ),
      padding: const EdgeInsets.all(20.0),
      child: Row(
        children: [
          // Lenkung
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                Text('LENKUNG', style: Theme.of(context).textTheme.labelLarge),
                const SizedBox(height: 12),
                Expanded(child: _buildSteeringWheel()),
              ],
            ),
          ),
          // Vertikaler Teiler (dezent)
          VerticalDivider(color: Colors.grey[300], indent: 10, endIndent: 10, thickness: 1),
          // Geschwindigkeit
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                Text('GESCHWINDIGKEIT', style: Theme.of(context).textTheme.labelLarge),
                const SizedBox(height: 12),
                Expanded(child: _buildSpeedControl()),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // --- Lenkrad ---
  Widget _buildSteeringWheel() {
    final theme = Theme.of(context);

    return GestureDetector(
      onPanUpdate: (details) {
        // Skalierung der Bewegung für feinere Steuerung
        double dxUpdate = details.delta.dx * 0.8;
        if (dxUpdate.abs() > 0.5) { // Nur reagieren bei signifikanter Bewegung
          setState(() {
            // Wert auf +-50 begrenzen
            direction = (direction + dxUpdate.toInt()).clamp(-50, 50);
          });
          _queueSendCommand('direction', direction);
        }
      },
      onPanEnd: (_) {
        // Langsam zur Mitte zurückkehren (optional, oder sofort)
        // Timer? _returnTimer;
        // _returnTimer?.cancel();
        // _returnTimer = Timer.periodic(Duration(milliseconds: 10), (timer) {
        //   setState(() {
        //     if (direction == 0) {
        //       timer.cancel();
        //     } else {
        //       direction = (direction * 0.8).round(); // Smooth return
        //       if (direction.abs() < 2) direction = 0; // Snap to zero
        //     }
        //   });
        //   _queueSendCommand('direction', direction);
        //   if (direction == 0) _queueSendCommand('direction', 0); // Ensure final 0 is sent
        // });

        // Sofort zur Mitte zurück
        setState(() {
          direction = 0;
        });
        _queueSendCommand('direction', 0);
      },
      child: Container(
        decoration: BoxDecoration(
          // Sehr dezenter Kreis als Basis
          shape: BoxShape.circle,
          color: Colors.grey[200], // Heller grauer Hintergrund
          border: Border.all(color: Colors.grey[300]!, width: 1.5),
        ),
        alignment: Alignment.center,
        child: Transform.rotate(
          // Angepasste Rotation für den -50 bis +50 Bereich
          // `math.pi / 1.8` -> ca. 100 Grad Gesamtausschlag visuell
          angle: direction * (math.pi / 1.8) / 50.0,
          child: Stack(
            alignment: Alignment.center,
            children: [
              // Einfacher Zeiger statt komplexem Lenkrad
              Container(
                width: 8,
                height: 70, // Länge des Zeigers
                decoration: BoxDecoration(
                  color: theme.colorScheme.primary,
                  borderRadius: BorderRadius.circular(4),
                ),
              ),
              // Mittelpunkt
              Container(
                width: 20,
                height: 20,
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  color: theme.colorScheme.background, // Hintergrundfarbe
                  border: Border.all(color: theme.colorScheme.primary!, width: 1.5),
                ),
              ),
              // Wertanzeige im Zentrum
              Positioned(
                bottom: 10, // Position unter dem Zeiger
                child: Container(
                  padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                   decoration: BoxDecoration(
                     color: Colors.white.withOpacity(0.7),
                     borderRadius: BorderRadius.circular(4),
                   ),
                  child: Text(
                    '$direction°', // Anzeige mit Grad-Symbol
                    style: TextStyle(
                      color: theme.colorScheme.primary,
                      fontWeight: FontWeight.bold,
                      fontSize: 12,
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  // --- Geschwindigkeitsregler ---
  Widget _buildSpeedControl() {
    final theme = Theme.of(context);
    final double controlHeight = MediaQuery.of(context).size.height * 0.5; // Beispielhöhe

    return GestureDetector(
      onVerticalDragUpdate: (details) {
        // Skalierung und Umkehrung der Bewegung
        double dyUpdate = -details.delta.dy * 0.8;
         if (dyUpdate.abs() > 0.5) {
            setState(() {
              speed = (speed + dyUpdate.toInt()).clamp(-100, 100);
            });
            _queueSendCommand('speed', speed);
         }
      },
      onVerticalDragEnd: (_) {
        // Sofort auf 0 zurück
        setState(() {
          speed = 0;
        });
        _queueSendCommand('speed', 0);
      },
      child: Container(
        width: 60, // Feste Breite für den Regler
        decoration: BoxDecoration(
          color: Colors.grey[200], // Heller grauer Hintergrund
          borderRadius: BorderRadius.circular(30), // Abgerundete Ecken
          border: Border.all(color: Colors.grey[300]!, width: 1.5),
        ),
        child: LayoutBuilder( // Verwende LayoutBuilder für proportionale Positionierung
          builder: (context, constraints) {
            double trackHeight = constraints.maxHeight - 20; // Höhe der "Schiene"
            double zeroPoint = trackHeight / 2; // Mittelpunkt (0 Geschwindigkeit)
            // Berechne die Position des Indikators relativ zur Mitte
            double indicatorPosition = zeroPoint - (speed / 100.0 * zeroPoint);

            // Bestimme die Farbe basierend auf der Geschwindigkeit
            Color indicatorColor = speed == 0
                ? Colors.grey[500]!
                : speed > 0
                    ? Colors.green[600]!
                    : Colors.red[600]!;

            return Stack(
              alignment: Alignment.center,
              children: [
                 // Mittellinie (optional)
                 Positioned(
                    left: 0,
                    right: 0,
                    top: zeroPoint + 10, // +10 wegen Padding oben
                    child: Container(height: 1, color: Colors.grey[400]),
                 ),

                // Beweglicher Indikator (einfacher Kreis)
                Positioned(
                  top: indicatorPosition + 10 - 10, // +10 Padding, -10 halbe Höhe Indikator
                  child: Container(
                    width: 40,
                    height: 20,
                    decoration: BoxDecoration(
                      color: indicatorColor,
                      borderRadius: BorderRadius.circular(10),
                      // border: Border.all(color: Colors.white, width: 1.5) // Optionaler weißer Rand
                    ),
                    alignment: Alignment.center,
                    child: Text(
                       '${speed.abs()}',
                        style: TextStyle(
                            color: Colors.white,
                            fontWeight: FontWeight.bold,
                            fontSize: 12
                        ),
                    ),
                  ),
                ),
                 // Textanzeige unten (Vorwärts/Rückwärts)
                 Positioned(
                    bottom: 10,
                    child: Text(
                        speed > 0 ? 'VOR' : (speed < 0 ? 'ZURÜCK' : 'STOP'),
                        style: theme.textTheme.bodySmall?.copyWith(
                            color: indicatorColor,
                            fontWeight: FontWeight.bold
                        )
                    )
                 )
              ],
            );
          },
        ),
      ),
    );
  }

  // --- Zusatzfunktionen (Rechts) ---
  Widget _buildExtraControls() {
    return Container(
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.surface,
        borderRadius: BorderRadius.circular(16),
        // border: Border.all(color: Colors.grey[300]!, width: 1), // Optional
      ),
      padding: const EdgeInsets.all(20.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text('FUNKTIONEN', style: Theme.of(context).textTheme.labelLarge),
          const SizedBox(height: 20),
          // Grid für die Buttons
          Expanded(
            child: GridView.count(
              crossAxisCount: 2, // 2 Spalten
              mainAxisSpacing: 12,
              crossAxisSpacing: 12,
              childAspectRatio: 1.8, // Seitenverhältnis der Buttons anpassen
              physics: const NeverScrollableScrollPhysics(), // Kein Scrollen im Grid
              children: [
                _buildFeatureButton(
                  icon: headlightsOn ? Icons.lightbulb : Icons.lightbulb_outline,
                  label: 'Licht',
                  isActive: headlightsOn,
                  onPressed: () {
                    setState(() {
                      headlightsOn = !headlightsOn;
                    });
                    _queueSendCommand('headlights', headlightsOn);
                  },
                ),
                _buildFeatureButton(
                  icon: hornOn ? Icons.volume_up : Icons.volume_up_outlined,
                  label: 'Hupe',
                  isActive: hornOn,
                  onPressed: () { // Button gedrückt halten Logik
                    if (!hornOn) { // Nur starten, wenn nicht schon an
                       setState(() => hornOn = true);
                       _queueSendCommand('horn', true);
                    }
                  },
                   onRelease: () { // Button loslassen
                     if (hornOn) { // Nur stoppen, wenn an
                       setState(() => hornOn = false);
                       _queueSendCommand('horn', false);
                     }
                   }
                ),
                _buildFeatureButton(
                  icon: turboMode ? Icons.local_fire_department : Icons.local_fire_department_outlined,
                  label: 'Turbo',
                  isActive: turboMode,
                  onPressed: () {
                    if (!turboMode) {
                      setState(() => turboMode = true);
                      _queueSendCommand('turbo', true);
                      // Turbo nach 2 Sekunden automatisch aus
                      Future.delayed(const Duration(seconds: 2), () {
                         if (mounted && turboMode) { // Nur wenn noch aktiv und Widget existiert
                            setState(() => turboMode = false);
                           _queueSendCommand('turbo', false);
                         }
                      });
                    }
                  },
                ),
                _buildFeatureButton(
                  icon: calibrationMode ? Icons.rotate_right : Icons.settings_backup_restore,
                  label: 'Kalibrieren',
                  isActive: calibrationMode,
                  onPressed: () {
                    if (!calibrationMode) {
                      setState(() => calibrationMode = true);
                      _queueSendCommand('calibrate', true);
                      // Modus nach 1 Sekunde zurücksetzen (nur UI)
                      Future.delayed(const Duration(seconds: 1), () {
                         if (mounted) setState(() => calibrationMode = false);
                      });
                    }
                  },
                ),
              ],
            ),
          ),
          const SizedBox(height: 16),
          // Vereinfachte Batterieanzeige
          _buildBatteryStatus(),
        ],
      ),
    );
  }

  // --- Feature Button (vereinfacht) ---
  Widget _buildFeatureButton({
    required IconData icon,
    required String label,
    required bool isActive,
    required VoidCallback onPressed,
    VoidCallback? onRelease, // Optional für Hupe
  }) {
    final theme = Theme.of(context);
    final activeColor = theme.colorScheme.secondary; // Akzentfarbe für aktiv
    final inactiveColor = theme.colorScheme.primary; // Hauptfarbe für inaktiv

    return GestureDetector( // Verwende GestureDetector für onLongPress/onTapUp
       onTapDown: (_) => onPressed(),
       onTapUp: (_) => onRelease?.call(), // Nur wenn onRelease definiert ist
       onTapCancel: () => onRelease?.call(), // Auch bei Abbruch loslassen
       child: Container(
        decoration: BoxDecoration(
          color: isActive ? activeColor.withOpacity(0.1) : Colors.transparent,
          borderRadius: BorderRadius.circular(12),
          border: Border.all(
            color: isActive ? activeColor : Colors.grey[300]!,
            width: 1.5,
          ),
        ),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              icon,
              color: isActive ? activeColor : inactiveColor,
              size: 24, // Etwas kleinere Icons
            ),
            const SizedBox(height: 6),
            Text(
              label,
              style: theme.textTheme.bodySmall?.copyWith(
                fontWeight: FontWeight.w500,
                color: isActive ? activeColor : inactiveColor,
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }

 // --- Batterie Status (vereinfacht) ---
 Widget _buildBatteryStatus() {
    final theme = Theme.of(context);
    double batteryLevel = 0.75; // Beispielwert (0.0 bis 1.0)
    Color batteryColor = batteryLevel > 0.6 ? Colors.green[600]! : (batteryLevel > 0.3 ? Colors.orange[600]! : Colors.red[600]!);

    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
      decoration: BoxDecoration(
          color: Colors.grey[100],
          borderRadius: BorderRadius.circular(8),
          border: Border.all(color: Colors.grey[300]!)
      ),
      child: Row(
        children: [
          Icon(
            batteryLevel > 0.95 ? Icons.battery_full
                : batteryLevel > 0.6 ? Icons.battery_5_bar
                : batteryLevel > 0.3 ? Icons.battery_3_bar
                : Icons.battery_alert,
            color: batteryColor,
            size: 18,
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              'Batterie',
              style: theme.textTheme.bodySmall?.copyWith(color: theme.colorScheme.primary),
            ),
          ),
          // Einfache Fortschrittsanzeige
          SizedBox(
             width: 60, // Breite des Balkens
             height: 8,
             child: ClipRRect( // Clip für abgerundete Ecken des Fortschritts
                 borderRadius: BorderRadius.circular(4),
                 child: LinearProgressIndicator(
                   value: batteryLevel,
                   backgroundColor: Colors.grey[300],
                   valueColor: AlwaysStoppedAnimation<Color>(batteryColor),
                 )
             )
          ),
          const SizedBox(width: 8),
          Text(
            '${(batteryLevel * 100).toInt()}%',
            style: theme.textTheme.bodySmall?.copyWith(
                color: batteryColor, fontWeight: FontWeight.bold),
          ),
        ],
      ),
    );
 }


  // --- Verbindungsdialog (helles Theme) ---
  Widget _buildConnectionDialog() {
    final TextEditingController serverController = TextEditingController(text: serverAddress);
    final theme = Theme.of(context);

    return Dialog(
      backgroundColor: theme.colorScheme.background, // Weißer Hintergrund
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16), // Etwas weniger rund
         side: BorderSide(color: Colors.grey[300]!) // Optional: Dezenter Rand
      ),
      child: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.wifi_outlined, color: theme.colorScheme.primary),
                const SizedBox(width: 12),
                Text(
                  'Verbindungseinstellungen',
                  style: theme.textTheme.titleLarge,
                ),
              ],
            ),
            const SizedBox(height: 24),
            TextField(
              controller: serverController,
              style: TextStyle(color: theme.colorScheme.onBackground), // Dunkler Text
              decoration: InputDecoration(
                labelText: 'Server-Adresse (z.B. http://192.168.x.x:8080)',
                labelStyle: TextStyle(color: Colors.grey[600]),
                // Minimalistischer Input Border
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8),
                  borderSide: BorderSide(color: Colors.grey[400]!),
                ),
                enabledBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8),
                  borderSide: BorderSide(color: Colors.grey[400]!),
                ),
                focusedBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8),
                  borderSide: BorderSide(color: theme.colorScheme.primary!, width: 1.5),
                ),
                prefixIcon: Icon(Icons.link_outlined, color: Colors.grey[600]),
                 contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 10) // Kompakteres Padding
              ),
              keyboardType: TextInputType.url,
            ),
            const SizedBox(height: 16),
            Row(
              children: [
                Text(
                  'Status: ',
                  style: theme.textTheme.bodyMedium,
                ),
                Text(
                  connectionStatus,
                  style: theme.textTheme.bodyMedium?.copyWith(
                    color: isConnected ? Colors.green[700] : Colors.red[700],
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
            const SizedBox(height: 24),
            // Buttons am Ende
            Row(
              mainAxisAlignment: MainAxisAlignment.end,
              children: [
                TextButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                  child: const Text('Abbrechen'),
                ),
                const SizedBox(width: 12),
                ElevatedButton(
                  onPressed: () {
                    // Nur aktualisieren, wenn die Adresse gültig aussieht (optional)
                    String newAddress = serverController.text.trim();
                    if (Uri.tryParse(newAddress)?.hasAbsolutePath ?? false) {
                       if (mounted) {
                         setState(() {
                           serverAddress = newAddress;
                         });
                       }
                       Navigator.of(context).pop();
                       _testConnection(); // Verbindung testen mit neuer Adresse
                    } else {
                      // Optional: Fehlermeldung anzeigen
                       ScaffoldMessenger.of(context).showSnackBar(
                           const SnackBar(content: Text('Ungültige Serveradresse'), duration: Duration(seconds: 2),)
                       );
                    }

                  },
                  child: const Text('Testen & Speichern'),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}